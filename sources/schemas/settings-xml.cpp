// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "settings-xml.h"

// Settings
// 

const Settings::WidthType& Settings::
width () const
{
  return this->width_.get ();
}

Settings::WidthType& Settings::
width ()
{
  return this->width_.get ();
}

void Settings::
width (const WidthType& x)
{
  this->width_.set (x);
}

const Settings::WidthType& Settings::
widthDefaultValue ()
{
  return width_default_value_;
}

const Settings::HeightType& Settings::
height () const
{
  return this->height_.get ();
}

Settings::HeightType& Settings::
height ()
{
  return this->height_.get ();
}

void Settings::
height (const HeightType& x)
{
  this->height_.set (x);
}

const Settings::HeightType& Settings::
heightDefaultValue ()
{
  return height_default_value_;
}

const Settings::FullscreenType& Settings::
fullscreen () const
{
  return this->fullscreen_.get ();
}

Settings::FullscreenType& Settings::
fullscreen ()
{
  return this->fullscreen_.get ();
}

void Settings::
fullscreen (const FullscreenType& x)
{
  this->fullscreen_.set (x);
}

const Settings::FullscreenType& Settings::
fullscreenDefaultValue ()
{
  return fullscreen_default_value_;
}

const Settings::PortTUIOType& Settings::
portTUIO () const
{
  return this->portTUIO_.get ();
}

Settings::PortTUIOType& Settings::
portTUIO ()
{
  return this->portTUIO_.get ();
}

void Settings::
portTUIO (const PortTUIOType& x)
{
  this->portTUIO_.set (x);
}

const Settings::PortTUIOType& Settings::
portTUIODefaultValue ()
{
  return portTUIO_default_value_;
}

const Settings::PortOSCType& Settings::
portOSC () const
{
  return this->portOSC_.get ();
}

Settings::PortOSCType& Settings::
portOSC ()
{
  return this->portOSC_.get ();
}

void Settings::
portOSC (const PortOSCType& x)
{
  this->portOSC_.set (x);
}

const Settings::PortOSCType& Settings::
portOSCDefaultValue ()
{
  return portOSC_default_value_;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// Settings
//

const Settings::WidthType Settings::width_default_value_ (
  ::xsd::cxx::tree::traits< ::xml_schema::UnsignedShort, char >::create (
    ::std::string ("800"), 0, 0, 0));

const Settings::HeightType Settings::height_default_value_ (
  ::xsd::cxx::tree::traits< ::xml_schema::UnsignedShort, char >::create (
    ::std::string ("600"), 0, 0, 0));

const Settings::FullscreenType Settings::fullscreen_default_value_ (
  ::xsd::cxx::tree::traits< ::xml_schema::Boolean, char >::create (
    ::std::string ("false"), 0, 0, 0));

const Settings::PortTUIOType Settings::portTUIO_default_value_ (
  ::xsd::cxx::tree::traits< ::xml_schema::UnsignedShort, char >::create (
    ::std::string ("3333"), 0, 0, 0));

const Settings::PortOSCType Settings::portOSC_default_value_ (
  ::xsd::cxx::tree::traits< ::xml_schema::UnsignedShort, char >::create (
    ::std::string ("6666"), 0, 0, 0));

Settings::
Settings (const WidthType& width,
          const HeightType& height,
          const FullscreenType& fullscreen,
          const PortTUIOType& portTUIO,
          const PortOSCType& portOSC)
: ::xml_schema::Type (),
  width_ (width, ::xml_schema::Flags (), this),
  height_ (height, ::xml_schema::Flags (), this),
  fullscreen_ (fullscreen, ::xml_schema::Flags (), this),
  portTUIO_ (portTUIO, ::xml_schema::Flags (), this),
  portOSC_ (portOSC, ::xml_schema::Flags (), this)
{
}

Settings::
Settings (const Settings& x,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  width_ (x.width_, f, this),
  height_ (x.height_, f, this),
  fullscreen_ (x.fullscreen_, f, this),
  portTUIO_ (x.portTUIO_, f, this),
  portOSC_ (x.portOSC_, f, this)
{
}

Settings::
Settings (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  width_ (f, this),
  height_ (f, this),
  fullscreen_ (f, this),
  portTUIO_ (f, this),
  portOSC_ (f, this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void Settings::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // width
    //
    if (n.name () == "width" && n.namespace_ ().empty ())
    {
      if (!width_.present ())
      {
        this->width_.set (WidthTraits::create (i, f, this));
        continue;
      }
    }

    // height
    //
    if (n.name () == "height" && n.namespace_ ().empty ())
    {
      if (!height_.present ())
      {
        this->height_.set (HeightTraits::create (i, f, this));
        continue;
      }
    }

    // fullscreen
    //
    if (n.name () == "fullscreen" && n.namespace_ ().empty ())
    {
      if (!fullscreen_.present ())
      {
        this->fullscreen_.set (FullscreenTraits::create (i, f, this));
        continue;
      }
    }

    // portTUIO
    //
    if (n.name () == "portTUIO" && n.namespace_ ().empty ())
    {
      if (!portTUIO_.present ())
      {
        this->portTUIO_.set (PortTUIOTraits::create (i, f, this));
        continue;
      }
    }

    // portOSC
    //
    if (n.name () == "portOSC" && n.namespace_ ().empty ())
    {
      if (!portOSC_.present ())
      {
        this->portOSC_.set (PortOSCTraits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!width_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "width",
      "");
  }

  if (!height_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "height",
      "");
  }

  if (!fullscreen_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "fullscreen",
      "");
  }

  if (!portTUIO_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "portTUIO",
      "");
  }

  if (!portOSC_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "portOSC",
      "");
  }
}

Settings* Settings::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Settings (*this, f, c);
}

Settings::
~Settings ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::Settings >
settings (const ::std::string& u,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::Settings > r (
    ::settings (
      d, f | ::xml_schema::Flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::Settings >
settings (const ::std::string& u,
          ::xml_schema::ErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::Settings > r (
    ::settings (
      d, f | ::xml_schema::Flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::Settings >
settings (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::Settings > r (
    ::settings (
      d, f | ::xml_schema::Flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::Settings >
settings (::std::istream& is,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::settings (isrc, f, p);
}

::std::auto_ptr< ::Settings >
settings (::std::istream& is,
          ::xml_schema::ErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::settings (isrc, h, f, p);
}

::std::auto_ptr< ::Settings >
settings (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::settings (isrc, h, f, p);
}

::std::auto_ptr< ::Settings >
settings (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::settings (isrc, f, p);
}

::std::auto_ptr< ::Settings >
settings (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::ErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::settings (isrc, h, f, p);
}

::std::auto_ptr< ::Settings >
settings (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::settings (isrc, h, f, p);
}

::std::auto_ptr< ::Settings >
settings (::xercesc::InputSource& i,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::Settings > r (
    ::settings (
      d, f | ::xml_schema::Flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::Settings >
settings (::xercesc::InputSource& i,
          ::xml_schema::ErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::Settings > r (
    ::settings (
      d, f | ::xml_schema::Flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::Settings >
settings (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::Settings > r (
    ::settings (
      d, f | ::xml_schema::Flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::Settings >
settings (const ::xercesc::DOMDocument& d,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  if (f & ::xml_schema::Flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::Settings > r (
      ::settings (
        c, f | ::xml_schema::Flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "settings" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::Settings > r (
      ::xsd::cxx::tree::traits< ::Settings, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "settings",
    "");
}

::std::auto_ptr< ::Settings >
settings (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::Flags::keep_dom) &&
     !(f & ::xml_schema::Flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::Flags::keep_dom)
    doc.setUserData (::xml_schema::dom::treeNodeKey,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "settings" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::Settings > r (
      ::xsd::cxx::tree::traits< ::Settings, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "settings",
    "");
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

void
settings (::std::ostream& o,
          const ::Settings& s,
          const ::xml_schema::NamespaceInfomap& m,
          const ::std::string& e,
          ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::settings (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
settings (::std::ostream& o,
          const ::Settings& s,
          ::xml_schema::ErrorHandler& h,
          const ::xml_schema::NamespaceInfomap& m,
          const ::std::string& e,
          ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::settings (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
settings (::std::ostream& o,
          const ::Settings& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::NamespaceInfomap& m,
          const ::std::string& e,
          ::xml_schema::Flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::settings (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
settings (::xercesc::XMLFormatTarget& t,
          const ::Settings& s,
          const ::xml_schema::NamespaceInfomap& m,
          const ::std::string& e,
          ::xml_schema::Flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::settings (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
settings (::xercesc::XMLFormatTarget& t,
          const ::Settings& s,
          ::xml_schema::ErrorHandler& h,
          const ::xml_schema::NamespaceInfomap& m,
          const ::std::string& e,
          ::xml_schema::Flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::settings (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
settings (::xercesc::XMLFormatTarget& t,
          const ::Settings& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::NamespaceInfomap& m,
          const ::std::string& e,
          ::xml_schema::Flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::settings (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
settings (::xercesc::DOMDocument& d,
          const ::Settings& s,
          ::xml_schema::Flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "settings" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "settings",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
settings (const ::Settings& s,
          const ::xml_schema::NamespaceInfomap& m,
          ::xml_schema::Flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "settings",
      "",
      m, f));

  ::settings (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const Settings& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // width
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "width",
        e));

    s << i.width ();
  }

  // height
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "height",
        e));

    s << i.height ();
  }

  // fullscreen
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "fullscreen",
        e));

    s << i.fullscreen ();
  }

  // portTUIO
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "portTUIO",
        e));

    s << i.portTUIO ();
  }

  // portOSC
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "portOSC",
        e));

    s << i.portOSC ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

